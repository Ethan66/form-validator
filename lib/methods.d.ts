import rules from './rules';
declare function has(value: string | number, arg: string | number): boolean;
declare function has(value: any[], arg: any): boolean;
declare function has(value: object, arg: string): boolean;
declare function eq(value: any, arg: any): boolean;
declare const methods: {
    obj: (arg: any) => arg is object;
    boolean: (value: any) => value is boolean;
    str: (value: any) => value is string;
    num: (value: any) => value is number;
    arr: (value: any) => value is any[];
    func: (value: any) => value is Function;
    empty: (value: any) => boolean;
    eq: typeof eq;
    not: (value: any, arg: any) => boolean;
    gt: <T extends string | number | Date>(value: T, arg: T) => boolean;
    gte: <T_1 extends string | number | Date>(value: T_1, arg: T_1) => boolean;
    lt: <T_2 extends string | number | Date>(value: T_2, arg: T_2) => boolean;
    lte: <T_3 extends string | number | Date>(value: T_3, arg: T_3) => boolean;
    len: (value: string | number | any[], arg: string | number) => boolean;
    min: (value: string | number | any[], arg: string | number) => boolean;
    max: (value: string | number | any[], arg: string | number) => boolean;
    reg: (value: any, arg: RegExp) => boolean;
    has: typeof has;
    ext: (value: string, arg: string) => boolean;
    enum: (value: any, arg1: any, ...args: any) => boolean;
    between: <T_4 extends string | number | Date>(value: T_4, arg1: T_4, arg2: T_4) => boolean;
};
declare const _default: {
    obj: (arg: any) => arg is object;
    boolean: (value: any) => value is boolean;
    str: (value: any) => value is string;
    num: (value: any) => value is number;
    arr: (value: any) => value is any[];
    func: (value: any) => value is Function;
    empty: (value: any) => boolean;
    eq: typeof eq;
    not: (value: any, arg: any) => boolean;
    gt: <T extends string | number | Date>(value: T, arg: T) => boolean;
    gte: <T_1 extends string | number | Date>(value: T_1, arg: T_1) => boolean;
    lt: <T_2 extends string | number | Date>(value: T_2, arg: T_2) => boolean;
    lte: <T_3 extends string | number | Date>(value: T_3, arg: T_3) => boolean;
    len: (value: string | number | any[], arg: string | number) => boolean;
    min: (value: string | number | any[], arg: string | number) => boolean;
    max: (value: string | number | any[], arg: string | number) => boolean;
    reg: (value: any, arg: RegExp) => boolean;
    has: typeof has;
    ext: (value: string, arg: string) => boolean;
    enum: (value: any, arg1: any, ...args: any) => boolean;
    between: <T_4 extends string | number | Date>(value: T_4, arg1: T_4, arg2: T_4) => boolean;
} & {
    required: (value: string | number) => boolean;
    english: (value: string | number) => boolean;
    alphanum: (value: string | number) => boolean;
    chinese: (value: string | number) => boolean;
    nospace: (value: string | number) => boolean;
    float: (value: string | number) => boolean;
    positivefloat: (value: string | number) => boolean;
    integer: (value: string | number) => boolean;
    positiveint: (value: string | number) => boolean;
    decimal: (value: string | number) => boolean;
    percent: (value: string | number) => boolean;
    email: (value: string | number) => boolean;
    http: (value: string | number) => boolean;
    phone: (value: string | number) => boolean;
    year: (value: string | number) => boolean;
    month: (value: string | number) => boolean;
    day: (value: string | number) => boolean;
    hour: (value: string | number) => boolean;
    minute: (value: string | number) => boolean;
    hmt: (value: string | number) => boolean;
    time: (value: string | number) => boolean;
    date: (value: string | number) => boolean;
    datetime: (value: string | number) => boolean;
    path: (value: string | number) => boolean;
    file: (value: string | number) => boolean;
    imgurl: (value: string | number) => boolean;
};
export default _default;
export declare type methodKey = keyof typeof methods | keyof typeof rules;
//# sourceMappingURL=methods.d.ts.map